/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.ManageCityPanel;

import Business.City.City;
import Business.Country.Country;
import Business.Request.RequestID;
import Business.Request.Requestor;
import Business.Request.Status;
import Business.State.State;
import Business.UserAccount.UserAccount;
import Business.WHO;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import Business.UserAccount.UserAccount;
import Business.UserAccount.UserAccountDirectory;

/**
 *
 * @author VAIBHAV RAJ
 */
public class AuditorCityJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AuditorCityJPanel
     */
    ArrayList<RequestID> requestList;
    
    UserAccount userAccount;
    JPanel userProcessContainer;
    public AuditorCityJPanel(JPanel userProcessContainer, UserAccount account,City city, 
            State state,
            Country country,
            WHO business)  
    {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        requestList=new ArrayList<RequestID>();
     
        RequestID request=new RequestID();
        request.setRequestID(1);
        request.setRequestNo("889");
        Status status=new Status(1,"New");
        Requestor requestor=new Requestor(1,"Rohit","rohit.jain058@gmail.com");
        request.setStatus(status);
        request.setRequestor(requestor);
        requestList.add(request);
        this.userAccount=account;
//        account.setUsername("rohit");
//        account.setPassword("rohit");
//        city.setCityID(1);
//        city.setCityName("Mumbai");
        
        //Populate the requesting status table
        //requestList1=new ArrayList<RequestID>();
        RequestID request1=new RequestID();
        request1.setRequestID(200);
        request1.setRequestNo("100");
        Status status1=new Status(2,"In Process");
        Requestor requestor1=new Requestor(2,"Avinash","avinash.chourasiya787@gmail.com");
        request1.setStatus(status1);
        request1.setRequestor(requestor1);
        requestList.add(request1);
        
        populateRequestTable(requestList);
         

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ScrollJPane1 = new javax.swing.JScrollPane();
        newRequestJTable = new javax.swing.JTable();
        ScrollPane2 = new javax.swing.JScrollPane();
        newRequestJTable1 = new javax.swing.JTable();
        backJButton = new javax.swing.JButton();
        AssignRequest = new javax.swing.JButton();

        newRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "RequestID", "Name", "Date", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ScrollJPane1.setViewportView(newRequestJTable);

        newRequestJTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "RequestID", "Name", "Date", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ScrollPane2.setViewportView(newRequestJTable1);

        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        AssignRequest.setText("ASSIGN TO ME");
        AssignRequest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignRequestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(backJButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(219, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(AssignRequest)
                    .addComponent(ScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ScrollJPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(189, 189, 189))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(ScrollJPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(AssignRequest)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addComponent(ScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(backJButton)
                .addGap(41, 41, 41))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void AssignRequestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignRequestActionPerformed

        if(!(newRequestJTable.getSelectedRow()<0)  )
        {
            RequestID requestID = (RequestID) newRequestJTable.getValueAt(newRequestJTable.getSelectedRowCount(), 0);
            AuditorCityRequestViewJPanel mcvjp = new AuditorCityRequestViewJPanel(userProcessContainer, requestID);
            userProcessContainer.add(mcvjp);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
            newRequestJTable.getSelectionModel().clearSelection();
            RequestID request = (RequestID)newRequestJTable.getValueAt(newRequestJTable.getSelectedRowCount(), 0);
        request.setUserAccount(userAccount);
        request.getStatus().setStatusId(3);
        populateRequestTable(requestList);

        }
        else if(!(newRequestJTable1.getSelectedRow()<0))
        {
            RequestID requestID1 = (RequestID) newRequestJTable1.getValueAt(newRequestJTable1.getSelectedRowCount(), 0);
            AuditorCityRequestViewJPanel mcvjp1 = new AuditorCityRequestViewJPanel(userProcessContainer, requestID1);
            userProcessContainer.add(mcvjp1);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);
            newRequestJTable1.getSelectionModel().clearSelection();
        }
    }//GEN-LAST:event_AssignRequestActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AssignRequest;
    private javax.swing.JScrollPane ScrollJPane1;
    private javax.swing.JScrollPane ScrollPane2;
    private javax.swing.JButton backJButton;
    private javax.swing.JTable newRequestJTable;
    private javax.swing.JTable newRequestJTable1;
    // End of variables declaration//GEN-END:variables

    private void populateRequestTable(ArrayList<RequestID> requestList) {
        
        System.out.println("Inside populate");
     
                        DefaultTableModel model = (DefaultTableModel) newRequestJTable.getModel();
        
        model.setRowCount(0);
                DefaultTableModel model1 = (DefaultTableModel) newRequestJTable1.getModel();
        
        model1.setRowCount(0);
        
        for (RequestID request : requestList){
            if(request.getStatus().getStatusId()==1)
            {

            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getRequestor().getRequestorName();
            row[2]=request.getDateTime();
            row[3] = request.getStatus();
            model.addRow(row);
            }
        else
        {

     
            Object[] row = new Object[4];
            row[0] = request;
            row[1] = request.getRequestor().getRequestorName();
            row[2]=request.getDateTime();
            row[3] = request.getStatus();
            model1.addRow(row);
        
       }
            
     }
    }
}
